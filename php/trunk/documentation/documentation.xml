<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="../xslt/common.xsl" type="text/xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Documentation de PHP Falstelo</title>
    <link rel="stylesheet" type="text/css" href="common.css"/>
    <meta name="DC.Author" content="Nicolas Bouillon"/>
    <meta name="Date" content="Mai 2004"/>
  </head>
  <body>
   
    <h1>Présentation</h1>

    <p>Falstelo se propose de faciliter la création d'un site web basé sur XML et XSLT. Le but est de pouvoir générer des pages de manière simple, en ne spécifiant que le strict minimum : requètes SQL à exécuter, fichiers XML statiques à utiliser, feuille de style XSLT appliquée. Cependant, Falstelo doit également permettre d'ajouter des fonctionnalités supplémentaires sans difficulté, tout en restant très simple. En effet, PHP Falstelo fait un peut moins de 600 lignes, réparties principalement dans deux classes. À l'heure actuelle, seule une version PHP de Fastelo est disponible, mais une version Java ou Python peuvent être envisagées et facilement écrites.</p>

    <h1>Prérequis</h1>

    <p>Afin de pouvoir utiliser PHP Falstelo pour votre site, il faut vous assurer que vous possèdez les élements suivant&#160;:</p>
    <ol>
      <li>Apache, avec le module mod_rewrite activé&#160;;</li>
      <li>mod_php, avec le support d'au moins une base de donnée si vous désirez en utiliser une&#160;;</li>
      <li>la librairie ADODB pour php, toujours dans le cas ou vous souhaitez utiliser une base de donnée&#160;;</li>
      <li>le support de XML pour PHP (php4-domxml) et éventuellement php4-xslt si vous souhaitez utiliser Sablotron comme processeur XSLT au lieu de libxslt fourni par php4-domxml&#160;;</li>
    </ol>
    
    <h1>Installation</h1>

    <p>Pour installer PHP Falstelo, vous avez le choix d'installer une version stable, ou alors la dernière version en provenance du dépot Subversion.</p>

    <h2>Version stable</h2>

    <p>La version stable peut être téléchargée depuis la <a href="http://falstelo.bouil.org/">page d'accueil de Falstelo</a>. Il vous suffit ensuite de décompresser l'archive à l'endroit de votre choix.</p>
		<p style="font-weight: bold">Il n'y a pas de distribution officiellement stable à l'heure actuelle.</p>

    <h2>Version de développement</h2>

   <p>La version de développement peut être récupérée via Subversion&#160;:</p>
   
   <code>
    svn checkout svn://svn.berlios.de/svnroot/falstelo/php/trunk
   </code>
    
    <h2>Mise en place et configuration</h2>

   <p>Attention&#160;: si vous déplacez le répertoire de PHP Falstelo, il y a un fichier caché <code>.htaccess.tmpl</code> et votre fichier <code>.htaccess</code> qui pourrait ne pas être déplacé.</p>

   <h3>Fichier .htaccess</h3>

   <p>Pour faire fonctionner PHP Falstelo sur votre machine, il vous faut tout d'abord créer un fichier .htaccess à la racine de votre site. Pour cela, il suffit de copier le fichier modèle <code>.htaccess.tmpl</code> vers <code>.htaccess</code>. Il faut adapter la ligne suivante à votre configuration&#160;:</p>
   
   <p><code>RewriteRule ^([a-zA-Z0-9\-_]*).html$ /absolute/path/to/falstelo/index.php?page=$1 [L,QSA]</code></p>
   
   <p>La deuxième partie de la règle de réécriture d'URL contient le chemin absolu de votre installation, par rapport à la racine de votre serveur Web (et non pas par rapport à votre système de fichier !). Par exemple, si vous avez installé PHP Falstelo à la racine de votre site web, la ligne devra ressembler à ceci&#160;:</p>

   <p><code>RewriteRule ^([a-zA-Z0-9\-_]*).html$ /index.php?page=$1 [L,QSA]</code></p>

   <p>Dans le cadre d'une utilisation simple de PHP Falstelo, vous n'avez pas besoin de modifier plus ce fichier. Prenez garde toutefois&#160;: ce fichier défini l'UTF-8 comme encodage par défaut des fichiers produits. Si vos feuilles de style ne produisent pas une sortie formatée en Unicode, vous risquez d'avoir des surprises, même si votre déclaration XML ou votre balise «&#160;meta&#160;» est correcte. Cela est particulièrement vrai avec Mozilla.</p>

   <h3>Fichier <code>variables.php</code></h3>

   <p>Le fichier <code>variables.php</code> du répertoire <code>lib/</code> contient tous les paramètres personnalisables de PHP Falstelo. Vous ne devez <em>pas</em> modifier ce fichier directement, mais il doit vous servir de modèle pour votre propre fichier de configuration <code>variables.php</code> du répertoire <code>usrlib/</code>. Votre fichier de configuration ne contiendra alors que vos paramètres personnels. Ainsi, si une nouvelle version de PHP Falstelo introduit de nouvelles variables, vous n'aurez pas besoin de réappliquer vos modifications au fichier <code>variables.php</code> de base, mais vous pourrez simplement garder votre fichier <code>usrlib/variables.php</code> tel quel.</p>

   <p>Ce fichier de configuration contient entre autres les paramètres de connexion à la base de donnée (si vous souahaitez en utiliser une, bien sûr). Toutes les entrées sont commentés et vous pourrez ainsi facilement comprendre la signification de chaque paramètre.</p>

    <h1>Utilisation simple</h1>

   <p>Une fois PHP Falsteo installé, vous pouvez accéder à la page d'accueil par l'adresse <code>accueil.html</code>. Vous tomberez alors sur la page d'accueil de Falstelo (le site web et sa documentation sont inclus dans la distribution de Falstelo), qui pourra alors vous servir de modèle pour vos propres pages.</p>

   <p>Falstelo peut transformer deux types de pages. Des pages XML statiques, telles que la page <code>accueil.xml</code>, ou alors des pages dynamiques, utilisant des requètes vers une base de donnée. Grâce à l'utilisation d'une règle de réécriture d'URL (dans le <code>.htaccess</code> tel que nous l'avons vu plus haut), lorsque vous demandez la page <code>sous_rep/test.html</code>, c'est en réalité la page <code>index.php?page=sous_rep/test</code> qui sera appellée par Apache.</p>

   <p>Lorque vous demander la page <code>test</code>, il peut se présenter plusieurs cas de figures&#160;:</p>

   <ul>
    <li>
      Le fichier <code>test.xml</code> existe, c'est le cas d'une page statique que nous expliquerons en premier lieu.
    </li>
    <li>
      Le fichier <code>test.xml</code> n'existe pas, mais il existe un fichier <code>test.php</code>, c'est le cas des pages dynamique que nous expliquerons ensuite.
    </li>
    <li>
      Ni le fichier <code>test.xml</code>, ni <code>test.php</code> n'existe. Dans ce cas, c'est la page d'erreur (par défaut <code>404</code>) qui sera affichée, qu'elle soit dynamique ou statique.
    </li>
   </ul>

   <p>Par la suite, les exemples cités sont disponibles dans le répertoire <code>exemple/</code> de PHP Falstelo. Il est déconseillé, si vous ne connaissez pas très bien XSLT, de commencer par regarder les fichiers du site web de Falstelo.</p>

    <h2>Pages statiques simples</h2>

   <p>Pour faire transformer à PHP Falselo une page XML classique, il vous faut créer une feuille de style XSLT à votre goût. En général, les feuilles de styles sont placés dans le répertoire XSLT, mais vous êtes libres de les placer où bon vous semble si vous préférer organiser votre site web de manière différente. Créez ensuite un fichier XML classique contenant le contenu que vous souhaitez transformer. Comme PHP Falstelo peut utiliser (voir plus bas dans l'utilisation avancée) plusieurs fichiers XML en entrée et des requètes SQL, le document XML sera inclu dans un document XML plus vaste.</p>

   <p>Par exemple, créez le document <code>exemple/statique.xml</code> à la racine de votre site&#160;:</p>

   <pre><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<racine>
  Test
</racine>
]]></pre>

   <p>Ensuite, faites afficher la page <code>exemple/statique.html</code>. Vous obtiendez ceci&#160;:</p>

   <pre><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<page>
  <fichiers>
    <racine>
      Test
    </racine>
  </fichiers>
</page>
]]></pre>

    <p>Plusieurs choses se sont produites&#160;: premièrement, le contenu de votre fichier XML a été inclu dans la balise <code>fichiers</code>. En effet, comme nous le verrons par la suite, le résultat de vos requètes SQL sera disponible sous une autre balise, et vous pourrez également ajouter les données de votre choix sous le nom que vous voulez, comme fils direct de l'élement <code>page</code>. Deuxièmement, le fichier n'a été transformé par aucune feuille de style. En effet, puisqu'aucune feuille de style n'a été précisée dans l'entête du fichier XML, aucune transformation n'a été effectuée. Pour effectuer un transformation par rapport à votre feuille de sytle, vous devez ajouter l'instruction de traitement caractéristique juste après l'entête XML de votre fichier <code>exemple/statique.xml</code>&#160;:</p>

   <pre><![CDATA[<?xml-stylesheet href="./xslt/simple.xsl" type="text/xsl"?>]]></pre>

   <p>Ici, on suppose que votre fichier XSLT est placé dans le répertoire <code>xslt</code> par rapport au répertoire où se trouve votre fichier <code>exemple/statique.xml</code>. Dans le cas où PHP Falstelo ne trouve pas la feuille de style à appliquer (soit parce que l'instruction de traitement n'est pas présente, soit parce que le fichier spécifié est introuvable), votre fichier XML sera alors affiché sans aucune transformation.</p>
	 
	 <p>Voici <a href="../exemples/statique.html">ce que donne cet exemple</a>, à l'aide de la feuille de style <a href="../exemples/xslt/simple.xslt">simple.xslt</a>.</p>

    <h2>Pages dynamiques ou statiques multiples</h2>

   <p>Dès lors qu'un seul fichier XML statique ne suffit pas, il faut passer par un fichier PHP, contenant la liste des fichiers XML statiques ou des requètes SQL dont vous avez besoin. Votre fichier PHP contiendra une classe sur un modèle bien défini.</p>
   
   <p>Pour expliquer comment s'articule une telle classe PHP, nous verrons dans un premier temps le cas de fichiers XML multiples en expliquant les différentes instructions utilisés. Ensuite, nous expliquerons quelles instructions il est nécessaire d'ajouter pour effectuer des requètes SQL.</p>

   <h3>Définir les fichiers XML utilsés</h3>

	 <p>Imaginons que nous souhaitons afficher le contenu de deux fichiers XML. La méthode décrite ci dessus ne permet pas de le faire. Il faut alors créer un fichier PHP nommé <code>multiplexml.php</code> ressemblant à ceci&#160;:</p>
	 
	 <pre><![CDATA[<?php
require_once("./lib/ttransformation.php");

class Tmultiplexml extends Ttransformation
{
	function get()
		{
			$this->temps_cache = 0; //pas de cache pour ce fichier.

			$this->fichier_xslt = "exemples/xslt/simple.xslt";
			
			array_push($this->fichiers_xml, "exemples/statique.xml");
			array_push($this->fichiers_xml, "exemples/statique2.xml");

			return ttransformation::get();
		}
}
?>
	 ]]></pre>

	 <p>Cette classe PHP s'articule de la manière suivante&#160;: tout d'abord, on inclue l'objet de base fourni par falstelo (<code>./lib/ttransformation.php</code>). Il s'agit ensuite de déclarer une classe qui possède le même nom que notre fichier, précédé par un "T". Cette classe va spécialiser la classe de base nommée <code>Ttransformation</code> fournie par Falstelo et qui se charge de tout le travail.</p>
	 
	 <p>Un fois ceci fait, il ne reste plus qu'a affecter aux différentes variables de notre objet les valeurs dont on a besoin pour cette page : le temps d'expiration du cache (s'il y a lieu, utiliser "0" pour ne pas utiliser de cache pour ce fichier), le fichier XSLT utilisé pour faire la transformation, le ou les fichiers XML utilisés. Enfin, il faut faire appel à la fonction <code>get</code> de notre objet de base, et en retourner le résultat.</p>
	 
	 <p>Afin d'afficher le résultat de la transformation, il suffit alors d'afficher la page <a href="../exemples/multiplexml.html">multiplexml.html</a>.</p>

	 <p>On notera que les chemins des fichiers sont donnés par rapport à l'emplacement du fichier PHP, et non pas par rapport à la racine du site.</p>
	 
	 <h3>Utiliser des requètes SQL</h3>
	 
	 <p>Voici un exemple de fichier utilsant des requêtes SQL&#160;:</p>
	 
	 <pre><![CDATA[<?php
require_once("./usrlib/tusrtransformation.php");

class Tblog_fr extends Tusrtransformation
{
  function get()
    {
      $this->temps_cache = 0; //pas de cache pour ce fichier.

      $this->xslt_params["onglet"] = "Blog";
      $this->xslt_params["titre-page"] = "Blog";
      $this->xslt_params["css-file"] = "blog.css";

      $this->fichier_xslt = "xslt/blog.xsl";

      if ( ! $_GET['categorie'])
      {
        $categorie = "%";
      }
      else
      {
        $categorie = $_GET['categorie'];
      }
      if ( ! $_GET['theme'])
      {
        $theme = "%";
      }
      else
      {
        $theme = $_GET['theme'];
      }
      $this->requetes_sql["blog"] = "SELECT blog.id, blog.titre, blog.categorie, blog.theme,
        blog.date, blog.corps, count(commentaires.id) nbcommentaires
        FROM bouil_blog as blog LEFT JOIN bouil_commentaires as commentaires 
        ON blog.id = commentaires.id_blog 
        WHERE categorie LIKE '$categorie' AND theme LIKE '$theme'
        GROUP BY blog.id ORDER BY date DESC;";

      $this->requetes_sql_champs_xml["blog"] = array("corps");
      return tusrtransformation::get();
    }
}
?>]]></pre>

		<p>Avant d'évoquer les requêtes SQL, on peut constater qu'il est également possible de définir des paramètres XSLT à passer au processeur XSLT. Cela peut être interessant dans le cas de feuilles de style génériques afin de définir, comme ici, le nom de la feuille de style CSS à utiliser, ou encore le titre de la page.</p>
		
		<p>Ensuite, on passe à la partie concernant les requêtes SQL, avec pour commencer simplement une récupération des variables passés à la page par la méthode GET, afin de personnaliser la requête. Ensuite, la requête nommée "<code>blog</code>" est ajoutée à la liste des requêtes à exécuter.</p>
    
    <p>Attention, il est très important que les champs aient un nom. Dans l'exemple ci dessus, le résultat de la selection de <code>count(commentaire.id)</code> sera nommé <code>nbcommentaires</code>.</p>
		
		<p>Dans le cas où, dans les champs de la base de donnée, se trouvent les caractères comme "&lt;", "&gt;" ou "&amp;", ils seront automatiquement échappés sous forme d'entités XML. Cependant, il est possible d'éviter ce comportement, dans le cas ici du champ "<code>corps</code>" de la requête "<code>blog</code>", qui sera laissé tel quel, car il s'agit ici d'un champ contenant un document XTHML. Il faudra utiliser alors le tabeau <code>$this->requetes_sql_champs_xml</code> afin de spécifier le comportement désiré.</p>
		
		<p>Le document XML avant transformation sera de la forme suivante&#160;:</p>
		
		<pre><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<page>
  <fichiers/>
  <requetes>
    <adodb_result key="blog">
      <query>SELECT blog.id, blog.titre, blog.categorie, blog.theme, blog.date, blog.corps, count(commentaires.id) nbcommentaires FROM bouil_blog as blog LEFT JOIN bouil_commentaires as commentaires ON blog.id = commentaires.id_blog WHERE categorie LIKE '%' AND theme LIKE '%' GROUP BY blog.id ORDER BY date DESC;</query>
      <field name="id" type="int" max_length="11" ado_type="I"/>
      <field name="titre" type="blob" max_length="65535" ado_type="X"/>
      <field name="categorie" type="blob" max_length="65535" ado_type="X"/>
      <field name="theme" type="blob" max_length="65535" ado_type="X"/>
      <field name="date" type="datetime" max_length="19" ado_type="T"/>
      <field name="corps" type="blob" max_length="65535" ado_type="X"/>
      <field name="nbcommentaires" type="int" max_length="21" ado_type="I"/>
      <row>
        <id>2</id>
        <titre> Quelques raccourcis</titre>
        <categorie>Logiciels libres</categorie>
        <theme>Emacs</theme>
        <date>2004-03-31 19:43:49</date>
        <corps>
          <body xmlns="http://www.w3.org/1999/xhtml">
            <p>Quelques raccourcis sympatiques, que j'oublie sans arrêt :</p>
            <dl>
              <dt>
                <tt>C-M-\</tt>
              </dt>
              <dd>
                Intente la région selectionnée du buffer courant.
              </dd>
              <dt>
                <tt>M-/</tt>
              </dt>
              <dd>
                Complète le mot courant à partir des mots déjà écrits dans les buffers ouverts.
              </dd>
            </dl>
          </body>
        </corps>
        <nbcommentaires>2</nbcommentaires>
      </row>
      <row>
        <id>1</id>
        <titre>Détacher un processus d'un terminal</titre>
        <categorie>Logiciels libres</categorie>
        <theme>Shell</theme>
        <date>2004-03-31 19:42:50</date>
        <corps>
          <body xmlns="http://www.w3.org/1999/xhtml">
            <p>Pour détacher un processus d'un terminal, c'est à dire que la commande ne se termine pas lorsque le terminal est fermé :</p>
            <p>
              <tt>
                $ commande &amp; <br/>
                $ disown
              </tt>
            </p>
          </body>
        </corps>
        <nbcommentaires>0</nbcommentaires>
      </row>
    </adodb_result>
  </requetes>
</page>]]></pre>

    <p>Ici nous n'avons pas spécifié de fichier (on aurait pu), donc l'élément <code>fichiers</code> est vide. Ensuite il vient l'élément <code>requetes</code> qui contient un élement <code>adodb_result</code> par requête. La requête est ensuite rappellée, puis la définition des type de données de chaque champ, pour finir avec la liste les lignes retournées par la requête. On voit bien ici que le champ <code>corps</code> de la table <code>blog</code> est du contenu XML.</p>
    
    <p>Il vous suffit par la suite de créer votre feuille de style comme vous le souhaitez afin de générer la sortie désirée.</p>
    
    <h1>Utilsation avancée : personnalisation</h1>
    
    <p>Il peut parfois être utile d'ajouter, pour toutes vos pages, une gestion de session (utilisateur enregistré), ou des données extraites de la base de donnée à chaque fois. Afin d'éviter d'écrire des routines spéciales pour chacune des pages, il vous suffit de créer un fichier dans le répertoire <code>usrlib/</code> nommé <code>tusrtransformation.php</code>. Voici un squelette exemple d'un tel fichier&#160;:</p>
    
    <pre><![CDATA[<?php
require_once("lib/ttransformation.php");
require_once("tsession.php");

class Tusrtransformation extends Ttransformation
{
  function Tusrtransformation($page, $page_demandee){
    Ttransformation::Ttransformation($page, $page_demandee);
    $this->session();
  }

  function get(){
    //parametres de cache et autres...
    return Ttransformation::get();
  }
  
  function transformer(){
    //mettre ici par exemple les parametres XSLT permanents
    return Ttransformation::transformer();
  }
  
  function session()
  {
    global $_SESSION;
    session_start();
    if ($_SESSION['isession'] == null)
    {
      $this->iSession = new Tsession();
      $_SESSION['isession'] = &$this->iSession;
      // cherche si l'utilsateur prefere le francais ou l'anglais
      global $_SERVER;
      $lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
      if ( strpos($lang, "en") <= strpos($lang, "fr") && strpos($lang, "en") != null)
      {
        $this->iSession->lang = "en";
      }
      else
      {
        $this->iSession->lang = "fr";
      }
    }
    else
    {
      $this->iSession = &$_SESSION['isession']; 
    }

    global $_GET;
    if ( $_GET['lang'])
    {
      $this->iSession->lang = $_GET['lang'];
    }
    $this->xslt_params["lang"] = $this->iSession->lang;
    array_push($this->array_nodexml, $this->iSession->get_nodexml());
  }
}
}
?>]]></pre>

    <p>Lorsque Falstelo détecte l'existence d'un fichier <code>usrlib/tusrtransformation.php</code>, il instancie celui ci plutôt que la classe par défaut <code>TTransformation</code>. C'est pour cette raison que la classe que nous définissons hérite de <code>TTransformation</code>.</p>

    <p>Ici, nous avons créé une fonction de création et récupération de session. Un fichier <code>usrlib/tsession.php</code> existe contenant un objet de session. Cette classe contient une méthode permettant de représenter sous forme de noeud XML l'objet de session. Ainsi, cet objet est ajouté (dernière ligne de la fonction <code>session</code>) au document XML utilisé pour la transformation.</p>

    <p>Par la suite, tout document XML statique utilisera cette classe. Vous pouvez également faire hériter vos classes PHP personnelles de cette classe, ou d'une autre classe si vous souahitez avoir plusieurs comportements modèles.</p>

    <h1>Limitations - Bugs</h1>
    
    <p>Falstelo est un projet personnel, il n'est donc sans doute pas exempt de défauts, car il a pour objectif premier de répondre à mes besoins. J'ai pu noter quelques problèmes&#160;:</p>
    
    <ul>
      <li>Les routines PHP de gestion XML et XSLT sont récentes, et ne sont pas encore stabilisés. Il s'ensuit que selon la version de PHP installé sur votre serveur, certaines fonctions ne fonctionneront peut être pas (notamment le cas de libxslt). Voyez le code source à l'endroit de l'erreur, il est possible qu'une fonction de remplacement soit commentée à la ligne précédente ou suivante.</li>
    </ul>
    
    <p>Le code source de Falstelo n'est pas long et relativement simple. Il est commenté en français et devrait être facilement modifiable. Cependant, la principale difficulté est d'arriver à comprendre le cheminement dans toutes les fonctions lors d'un appel à une page !</p>
    
  </body>
</html>
